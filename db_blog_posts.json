[
{
  "model": "posts.post",
  "pk": 1,
  "fields": {
    "user": 1,
    "title": "First Blog",
    "slug": "first-blog",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "hello this is first blog",
    "draft": false,
    "publish": "2017-10-30",
    "read_time": 10,
    "views": 3,
    "updated": "2017-11-02T12:12:54.940Z",
    "timestamp": "2017-10-30T11:48:17.633Z"
  }
},
{
  "model": "posts.post",
  "pk": 2,
  "fields": {
    "user": 2,
    "title": "A Unique Slug Generator for Django",
    "slug": "unique-slug-generator-django",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Using the Random String Generator, we create unique slugs for any given model.",
    "draft": false,
    "publish": "2017-10-30",
    "read_time": 0,
    "views": 4,
    "updated": "2017-11-08T09:28:33.651Z",
    "timestamp": "2017-10-30T11:50:20.216Z"
  }
},
{
  "model": "posts.post",
  "pk": 3,
  "fields": {
    "user": 1,
    "title": "bootstrap 4 is here",
    "slug": "bootstrap-4-here",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Bootstrap is the most popular HTML, CSS, and JS framework in the world for building responsive, mobile-first projects on the web.",
    "draft": false,
    "publish": "2017-10-30",
    "read_time": 0,
    "views": 1,
    "updated": "2017-10-30T13:08:20.359Z",
    "timestamp": "2017-10-30T13:06:52.803Z"
  }
},
{
  "model": "posts.post",
  "pk": 4,
  "fields": {
    "user": 1,
    "title": "Navbar",
    "slug": "navbar",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "The navbar is a wrapper that positions branding, navigation, and other elements in a concise header. It\u2019s easily extensible and, thanks to our Collapse plugin, can easily integrate responsive behaviors.\r\n\r\nNavbars come with built-in support for a handful of sub-components. Choose from the following as needed:\r\n\r\n.navbar-brand for your company, product, or project name.\r\n.navbar-nav for a full-height and lightweight navigation (including support for dropdowns).\r\n.navbar-toggler for use with our collapse plugin and other navigation toggling behaviors.\r\n.form-inline for any form controls and actions.\r\n.navbar-text for adding vertically centered strings of text.\r\n.collapse.navbar-collapse for grouping and hiding navbar contents by a parent breakpoint.",
    "draft": false,
    "publish": "2017-10-30",
    "read_time": 0,
    "views": 2,
    "updated": "2017-11-02T07:47:55.552Z",
    "timestamp": "2017-10-30T13:07:51.380Z"
  }
},
{
  "model": "posts.post",
  "pk": 5,
  "fields": {
    "user": 2,
    "title": "Cards",
    "slug": "cards",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "A card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options.\r\n\r\nIf you\u2019re familiar with Bootstrap 3, cards replace our old panels, wells, and thumbnails. Similar functionality to those components is available as modifier classes for cards.",
    "draft": false,
    "publish": "2017-10-30",
    "read_time": 0,
    "views": 1,
    "updated": "2017-10-30T13:21:39.812Z",
    "timestamp": "2017-10-30T13:21:39.812Z"
  }
},
{
  "model": "posts.post",
  "pk": 6,
  "fields": {
    "user": 2,
    "title": "Alerts",
    "slug": "alerts",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.\r\n\r\nAlerts are available for any length of text, as well as an optional dismiss button. For proper styling, use one of the four required contextual classes (e.g., .alert-success). For inline dismissal, use the alerts jQuery plugin.",
    "draft": false,
    "publish": "2017-10-30",
    "read_time": 0,
    "views": 2,
    "updated": "2017-11-01T09:19:47.213Z",
    "timestamp": "2017-10-30T13:22:13.738Z"
  }
},
{
  "model": "posts.post",
  "pk": 7,
  "fields": {
    "user": 1,
    "title": "Badges",
    "slug": "badges",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Small and adaptive tag for adding context to just about any content.",
    "draft": false,
    "publish": "2017-10-30",
    "read_time": 5,
    "views": 2,
    "updated": "2017-11-02T12:24:04.057Z",
    "timestamp": "2017-10-30T13:22:38.703Z"
  }
},
{
  "model": "posts.post",
  "pk": 8,
  "fields": {
    "user": 2,
    "title": "Breadcrumb",
    "slug": "breadcrumb",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Indicate the current page\u2019s location within a navigational hierarchy. Separators are automatically added in CSS through ::before and content.",
    "draft": false,
    "publish": "2017-10-30",
    "read_time": 0,
    "views": 2,
    "updated": "2017-11-01T09:18:59.207Z",
    "timestamp": "2017-10-30T13:23:09.962Z"
  }
},
{
  "model": "posts.post",
  "pk": 9,
  "fields": {
    "user": 1,
    "title": "Buttons",
    "slug": "buttons",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Use Bootstrap\u2019s custom button styles for actions in forms, dialogs, and more. Includes support for a handful of contextual variations, sizes, states, and more.",
    "draft": false,
    "publish": "2017-10-30",
    "read_time": 0,
    "views": 5,
    "updated": "2017-11-03T06:11:42.545Z",
    "timestamp": "2017-10-30T13:23:29.362Z"
  }
},
{
  "model": "posts.post",
  "pk": 10,
  "fields": {
    "user": 1,
    "title": "Button group",
    "slug": "button-group",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Group a series of buttons together on a single line with the button group. Add on optional JavaScript radio and checkbox style behavior with our buttons plugin.",
    "draft": false,
    "publish": "2017-10-30",
    "read_time": 0,
    "views": 3,
    "updated": "2017-11-03T06:11:28.404Z",
    "timestamp": "2017-10-30T13:23:49.034Z"
  }
},
{
  "model": "posts.post",
  "pk": 11,
  "fields": {
    "user": 1,
    "title": "Forms",
    "slug": "forms",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Bootstrap provides several form control styles, layout options, and custom components for creating a wide variety of forms.\r\n\r\nContents\r\nForm controls\r\nTextual inputs\r\nForm layouts\r\nForm groups\r\nInline forms\r\nUsing the Grid\r\nCheckboxes and radios\r\nDefault (stacked)\r\nInline\r\nWithout labels\r\nStatic controls\r\nDisabled states\r\nReadonly inputs\r\nControl sizing\r\nColumn sizing\r\nHelp text\r\nBlock level\r\nInline\r\nValidation\r\nHow it works\r\nDefining states\r\nExamples\r\nCustom forms\r\nCheckboxes and radios\r\nCheckboxes\r\nRadios\r\nDisabled\r\nValidation states\r\nStacked\r\nSelect menu\r\nFile browser\r\nTranslating or customizing the strings",
    "draft": false,
    "publish": "2017-10-30",
    "read_time": 10,
    "views": 4,
    "updated": "2017-11-03T05:45:49.150Z",
    "timestamp": "2017-10-30T13:24:16.607Z"
  }
},
{
  "model": "posts.post",
  "pk": 12,
  "fields": {
    "user": 1,
    "title": "stackoverflow",
    "slug": "test1",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Learn, Share, Build\r\nEach month, over 50 million developers come to Stack Overflow to learn, share their knowledge, and build their careers.\r\n\r\nJoin the world\u2019s largest developer community.",
    "draft": false,
    "publish": "2017-10-31",
    "read_time": 2,
    "views": 10,
    "updated": "2017-11-07T06:11:30.630Z",
    "timestamp": "2017-10-31T06:25:20.595Z"
  }
},
{
  "model": "posts.post",
  "pk": 15,
  "fields": {
    "user": 3,
    "title": "The template layer",
    "slug": "the-template-layer",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "The template layer provides a designer-friendly syntax for rendering the information to be presented to the user. Learn how this syntax can be used by designers and how it can be extended by programmers:\r\n\r\nThe basics: Overview\r\nFor designers: Language overview | Built-in tags and filters | Humanization\r\nFor programmers: Template API | Custom tags and filters",
    "draft": false,
    "publish": "2017-11-01",
    "read_time": 0,
    "views": 6,
    "updated": "2017-11-06T12:08:08.846Z",
    "timestamp": "2017-11-01T09:21:10.003Z"
  }
},
{
  "model": "posts.post",
  "pk": 16,
  "fields": {
    "user": 2,
    "title": "post creation using CreateView",
    "slug": "post-creation-using-createview",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "post creation using CreateView and edited with UpdateView",
    "draft": false,
    "publish": "2017-11-01",
    "read_time": 5,
    "views": 4,
    "updated": "2017-11-02T13:22:11.124Z",
    "timestamp": "2017-11-01T11:22:00.281Z"
  }
},
{
  "model": "posts.post",
  "pk": 18,
  "fields": {
    "user": 1,
    "title": "Built-in template tags and filters : autoescape",
    "slug": "built-in-template-tags-and-filters-autoescape",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Controls the current auto-escaping behavior. This tag takes either on or off as an argument and that determines whether auto-escaping is in effect inside the block. The block is closed with an endautoescape ending tag.\r\n\r\nWhen auto-escaping is in effect, all variable content has HTML escaping applied to it before placing the result into the output (but after any filters have been applied). This is equivalent to manually applying the escape filter to each variable.\r\n\r\nThe only exceptions are variables that are already marked as \u201csafe\u201d from escaping, either by the code that populated the variable, or because it has had the safe or escape filters applied.\r\n\r\nSample usage:\r\n\r\n{% autoescape on %}\r\n    {{ body }}\r\n{% endautoescape %}",
    "draft": false,
    "publish": "2017-11-02",
    "read_time": 10,
    "views": 5,
    "updated": "2017-11-06T07:17:44.789Z",
    "timestamp": "2017-11-02T09:53:37.150Z"
  }
},
{
  "model": "posts.post",
  "pk": 19,
  "fields": {
    "user": 1,
    "title": "Form fields",
    "slug": "form-fields",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "class Field(**kwargs)\r\nWhen you create a Form class, the most important part is defining the fields of the form. Each field has custom validation logic, along with a few other hooks.\r\n\r\nField.clean(value)\r\nAlthough the primary way you\u2019ll use Field classes is in Form classes, you can also instantiate them and use them directly to get a better idea of how they work. Each Field instance has a clean() method, which takes a single argument and either raises a django.forms.ValidationError exception or returns the clean value:",
    "draft": false,
    "publish": "2017-11-02",
    "read_time": 10,
    "views": 3,
    "updated": "2017-11-03T04:35:18.437Z",
    "timestamp": "2017-11-02T12:23:35.921Z"
  }
},
{
  "model": "posts.post",
  "pk": 20,
  "fields": {
    "user": 1,
    "title": "A Complete Beginner's Guide to Django - Part 7",
    "slug": "a-complete-beginners-guide-to-django-part-7",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Welcome to the [last part](https://simpleisbetterthancomplex.com/series/2017/10/16/a-complete-beginners-guide-to-django-part-7.html) of our tutorial series! In this tutorial, we are going to deploy our Django application to a production server. We are also going to configure an Email service and HTTPS certificates for our servers.\r\n\r\nAt first, I thought about given an example using a Virtual Private Server (VPS), which is more generic and then using one Platform as a Service such as Heroku. But it was too much detail, so I ended up creating this tutorial focused on VPSs.\r\n\r\nOur project is live! If you want to check online before you go through the text, this is the application we are going to deploy:[ www.djangoboards.com](www.djangoboards.com).",
    "draft": false,
    "publish": "2017-11-02",
    "read_time": 10,
    "views": 5,
    "updated": "2017-11-04T06:41:58.545Z",
    "timestamp": "2017-11-02T12:44:34.074Z"
  }
},
{
  "model": "posts.post",
  "pk": 21,
  "fields": {
    "user": 1,
    "title": "The admin Site",
    "slug": "the-admin",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Find all you need to know about the automated admin interface, one of Django\u2019s most popular features:\r\n\r\n* Admin site.\r\n* Admin actions.\r\n* Admin documentation generator.",
    "draft": false,
    "publish": "2017-11-04",
    "read_time": 2,
    "views": 4,
    "updated": "2017-11-06T09:55:53.018Z",
    "timestamp": "2017-11-04T06:59:44.080Z"
  }
},
{
  "model": "posts.post",
  "pk": 22,
  "fields": {
    "user": 3,
    "title": "Password management in Django",
    "slug": "password-management-in-django",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Password management is something that should generally not be reinvented unnecessarily, and Django endeavors to provide a secure and flexible set of tools for managing user passwords. This document describes how Django stores passwords, how the storage hashing can be configured, and some utilities to work with hashed passwords.\r\nHow Django stores passwords\u00b6\r\n\r\nDjango provides a flexible password storage system and uses PBKDF2 by default.\r\n\r\nThe password attribute of a User object is a string in this format:\r\n\r\n<algorithm>$<iterations>$<salt>$<hash>\r\nThose are the components used for storing a User\u2019s password, separated by the dollar-sign character and consist of: the hashing algorithm, the number of algorithm iterations (work factor), the random salt, and the resulting password hash. The algorithm is one of a number of one-way hashing or password storage algorithms Django can use; see below. Iterations describe the number of times the algorithm is run over the hash. Salt is the random seed used and the hash is the result of the one-way function.\r\n\r\nBy default, Django uses the PBKDF2 algorithm with a SHA256 hash, a password stretching mechanism recommended by NIST. This should be sufficient for most users: it\u2019s quite secure, requiring massive amounts of computing time to break.\r\n\r\nHowever, depending on your requirements, you may choose a different algorithm, or even use a custom algorithm to match your specific security situation. Again, most users shouldn\u2019t need to do this \u2013 if you\u2019re not sure, you probably don\u2019t. If you do, please read on:\r\n\r\nDjango chooses the algorithm to use by consulting the PASSWORD_HASHERS setting. This is a list of hashing algorithm classes that this Django installation supports. The first entry in this list (that is, settings.PASSWORD_HASHERS[0]) will be used to store passwords, and all the other entries are valid hashers that can be used to check existing passwords. This means that if you want to use a different algorithm, you\u2019ll need to modify PASSWORD_HASHERS to list your preferred algorithm first in the list.\r\n\r\nThe default for PASSWORD_HASHERS is:\r\n\r\nPASSWORD_HASHERS = [\r\n    'django.contrib.auth.hashers.PBKDF2PasswordHasher',\r\n    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',\r\n    'django.contrib.auth.hashers.Argon2PasswordHasher',\r\n    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',\r\n    'django.contrib.auth.hashers.BCryptPasswordHasher',\r\n]\r\nThis means that Django will use PBKDF2 to store all passwords but will support checking passwords stored with PBKDF2SHA1, argon2, and bcrypt.\r\n\r\nThe next few sections describe a couple of common ways advanced users may want to modify this setting.",
    "draft": false,
    "publish": "2017-11-04",
    "read_time": 10,
    "views": 5,
    "updated": "2017-11-06T10:19:29.505Z",
    "timestamp": "2017-11-04T08:06:52.543Z"
  }
},
{
  "model": "posts.post",
  "pk": 24,
  "fields": {
    "user": 2,
    "title": "Using Argon2 with Django",
    "slug": "using-argon2-with-django",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "Argon2 is the winner of the 2015 Password Hashing Competition, a community organized open competition to select a next generation hashing algorithm. It\u2019s designed not to be easier to compute on custom hardware than it is to compute on an ordinary CPU.\r\n\r\nArgon2 is not the default for Django because it requires a third-party library. The Password Hashing Competition panel, however, recommends immediate use of Argon2 rather than the other algorithms supported by Django.\r\n\r\nTo use Argon2 as your default storage algorithm, do the following:\r\n\r\nInstall the argon2-cffi library. This can be done by running pip install django[argon2], which is equivalent to pip install argon2-cffi (along with any version requirement from Django\u2019s setup.py).\r\n\r\nModify PASSWORD_HASHERS to list Argon2PasswordHasher first. That is, in your settings file, you\u2019d put:\r\n\r\nPASSWORD_HASHERS = [\r\n    'django.contrib.auth.hashers.Argon2PasswordHasher',\r\n    'django.contrib.auth.hashers.PBKDF2PasswordHasher',\r\n    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',\r\n    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',\r\n    'django.contrib.auth.hashers.BCryptPasswordHasher',\r\n]\r\nKeep and/or add any entries in this list if you need Django to upgrade passwords.",
    "draft": false,
    "publish": "2017-11-04",
    "read_time": 5,
    "views": 4,
    "updated": "2017-11-06T10:19:24.489Z",
    "timestamp": "2017-11-04T08:13:16.570Z"
  }
},
{
  "model": "posts.post",
  "pk": 25,
  "fields": {
    "user": 1,
    "title": "terminal post",
    "slug": "terminal-post",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "terminal tabs",
    "draft": false,
    "publish": "2017-11-06",
    "read_time": 0,
    "views": 5,
    "updated": "2017-11-06T11:31:27.468Z",
    "timestamp": "2017-11-06T05:28:53.071Z"
  }
},
{
  "model": "posts.post",
  "pk": 26,
  "fields": {
    "user": 1,
    "title": "Search",
    "slug": "search",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "A common task for web applications is to search some data in the database with user input. In a simple case, this could be filtering a list of objects by a category. A more complex use case might require searching with weighting, categorization, highlighting, multiple languages, and so on. This document explains some of the possible use cases and the tools you can use.\r\n\r\nWe\u2019ll refer to the same models used in Making queries.",
    "draft": false,
    "publish": "2017-11-06",
    "read_time": 5,
    "views": 6,
    "updated": "2017-11-08T10:47:02.704Z",
    "timestamp": "2017-11-06T11:31:52.236Z"
  }
},
{
  "model": "posts.post",
  "pk": 27,
  "fields": {
    "user": 1,
    "title": "the draft post",
    "slug": "the-draft-post",
    "image": "",
    "height_field": 0,
    "width_field": 0,
    "content": "yet to be published",
    "draft": true,
    "publish": "2017-11-06",
    "read_time": 5,
    "views": 3,
    "updated": "2017-11-08T09:28:00.510Z",
    "timestamp": "2017-11-06T12:14:11.750Z"
  }
},
{
  "model": "posts.comment",
  "pk": 1,
  "fields": {
    "user": 1,
    "post": 12,
    "content": "testing comments",
    "parent": null,
    "updated": "2017-11-01T07:21:16.466Z",
    "timestamp": "2017-11-01T07:21:16.466Z"
  }
},
{
  "model": "posts.comment",
  "pk": 2,
  "fields": {
    "user": 1,
    "post": 12,
    "content": "reply to sunil's testing comments",
    "parent": 1,
    "updated": "2017-11-01T07:22:09.811Z",
    "timestamp": "2017-11-01T07:22:09.811Z"
  }
},
{
  "model": "posts.comment",
  "pk": 3,
  "fields": {
    "user": 2,
    "post": 12,
    "content": "testing new comment",
    "parent": null,
    "updated": "2017-11-01T07:28:09.958Z",
    "timestamp": "2017-11-01T07:28:09.958Z"
  }
},
{
  "model": "posts.comment",
  "pk": 4,
  "fields": {
    "user": 1,
    "post": 12,
    "content": "live test",
    "parent": null,
    "updated": "2017-11-01T08:06:12.956Z",
    "timestamp": "2017-11-01T08:06:12.956Z"
  }
},
{
  "model": "posts.comment",
  "pk": 5,
  "fields": {
    "user": 3,
    "post": 12,
    "content": "comment by test1 user",
    "parent": null,
    "updated": "2017-11-01T08:06:47.100Z",
    "timestamp": "2017-11-01T08:06:47.100Z"
  }
},
{
  "model": "posts.comment",
  "pk": 6,
  "fields": {
    "user": 3,
    "post": 1,
    "content": "hello there",
    "parent": null,
    "updated": "2017-11-01T09:07:33.295Z",
    "timestamp": "2017-11-01T09:07:33.295Z"
  }
},
{
  "model": "posts.comment",
  "pk": 7,
  "fields": {
    "user": 1,
    "post": 15,
    "content": "hkalksalklkfa",
    "parent": null,
    "updated": "2017-11-02T06:59:31.806Z",
    "timestamp": "2017-11-02T06:59:31.806Z"
  }
},
{
  "model": "posts.comment",
  "pk": 8,
  "fields": {
    "user": 1,
    "post": 15,
    "content": "shsahfahwioiwshda",
    "parent": null,
    "updated": "2017-11-02T07:00:51.502Z",
    "timestamp": "2017-11-02T07:00:51.502Z"
  }
},
{
  "model": "posts.comment",
  "pk": 9,
  "fields": {
    "user": 1,
    "post": 16,
    "content": "lets try with detailview comments",
    "parent": null,
    "updated": "2017-11-02T07:05:15.260Z",
    "timestamp": "2017-11-02T07:05:15.260Z"
  }
},
{
  "model": "posts.comment",
  "pk": 10,
  "fields": {
    "user": 1,
    "post": 16,
    "content": "testing replies #1",
    "parent": 9,
    "updated": "2017-11-02T10:40:54.255Z",
    "timestamp": "2017-11-02T10:34:42.440Z"
  }
},
{
  "model": "posts.comment",
  "pk": 11,
  "fields": {
    "user": 1,
    "post": 16,
    "content": "testing replies #2",
    "parent": 9,
    "updated": "2017-11-02T10:40:32.223Z",
    "timestamp": "2017-11-02T10:40:32.223Z"
  }
},
{
  "model": "posts.comment",
  "pk": 12,
  "fields": {
    "user": 1,
    "post": 15,
    "content": "testing replies for shsahfahwioiwshda #1",
    "parent": 8,
    "updated": "2017-11-02T10:42:00.912Z",
    "timestamp": "2017-11-02T10:42:00.912Z"
  }
},
{
  "model": "posts.comment",
  "pk": 13,
  "fields": {
    "user": 1,
    "post": 16,
    "content": "ahsajaskj",
    "parent": null,
    "updated": "2017-11-02T12:13:16.234Z",
    "timestamp": "2017-11-02T12:13:16.234Z"
  }
},
{
  "model": "posts.comment",
  "pk": 14,
  "fields": {
    "user": 3,
    "post": 19,
    "content": "need markdown for code block",
    "parent": null,
    "updated": "2017-11-03T04:35:57.061Z",
    "timestamp": "2017-11-03T04:35:57.061Z"
  }
},
{
  "model": "posts.comment",
  "pk": 15,
  "fields": {
    "user": 3,
    "post": 18,
    "content": "need markdown for code block",
    "parent": null,
    "updated": "2017-11-03T04:58:58.469Z",
    "timestamp": "2017-11-03T04:58:58.469Z"
  }
},
{
  "model": "posts.comment",
  "pk": 16,
  "fields": {
    "user": 3,
    "post": 20,
    "content": "this is the application we are going to deploy: www.djangoboards.com.",
    "parent": null,
    "updated": "2017-11-03T05:00:31.539Z",
    "timestamp": "2017-11-03T05:00:31.539Z"
  }
},
{
  "model": "posts.comment",
  "pk": 17,
  "fields": {
    "user": 3,
    "post": 19,
    "content": "reply for markdown",
    "parent": null,
    "updated": "2017-11-03T05:28:35.632Z",
    "timestamp": "2017-11-03T05:28:35.632Z"
  }
},
{
  "model": "posts.comment",
  "pk": 18,
  "fields": {
    "user": 3,
    "post": 15,
    "content": "testing replies for shsahfahwioiwshda #2",
    "parent": null,
    "updated": "2017-11-03T05:39:56.144Z",
    "timestamp": "2017-11-03T05:39:56.144Z"
  }
},
{
  "model": "posts.comment",
  "pk": 19,
  "fields": {
    "user": 3,
    "post": 20,
    "content": "reply this is the application we are going to deploy: www.djangoboards.com. #1",
    "parent": null,
    "updated": "2017-11-03T05:42:25.973Z",
    "timestamp": "2017-11-03T05:42:25.973Z"
  }
},
{
  "model": "posts.comment",
  "pk": 20,
  "fields": {
    "user": 3,
    "post": 11,
    "content": "comment forms #1",
    "parent": null,
    "updated": "2017-11-03T05:46:02.249Z",
    "timestamp": "2017-11-03T05:46:02.249Z"
  }
},
{
  "model": "posts.comment",
  "pk": 21,
  "fields": {
    "user": 3,
    "post": 11,
    "content": "reply comment forms #1",
    "parent": null,
    "updated": "2017-11-03T05:46:20.086Z",
    "timestamp": "2017-11-03T05:46:20.086Z"
  }
},
{
  "model": "posts.comment",
  "pk": 22,
  "fields": {
    "user": 3,
    "post": 11,
    "content": "reply comment forms #2",
    "parent": 20,
    "updated": "2017-11-03T05:50:56.819Z",
    "timestamp": "2017-11-03T05:50:56.819Z"
  }
},
{
  "model": "posts.comment",
  "pk": 23,
  "fields": {
    "user": 3,
    "post": 11,
    "content": "reply comment forms ##1",
    "parent": 21,
    "updated": "2017-11-03T05:51:26.869Z",
    "timestamp": "2017-11-03T05:51:26.869Z"
  }
},
{
  "model": "posts.comment",
  "pk": 24,
  "fields": {
    "user": 3,
    "post": 18,
    "content": "will be added  soon",
    "parent": 15,
    "updated": "2017-11-03T05:56:34.752Z",
    "timestamp": "2017-11-03T05:56:34.752Z"
  }
},
{
  "model": "posts.comment",
  "pk": 25,
  "fields": {
    "user": 3,
    "post": 18,
    "content": "wait for some more days",
    "parent": 15,
    "updated": "2017-11-03T06:04:54.284Z",
    "timestamp": "2017-11-03T06:04:54.284Z"
  }
},
{
  "model": "posts.comment",
  "pk": 26,
  "fields": {
    "user": 3,
    "post": 18,
    "content": "test",
    "parent": 15,
    "updated": "2017-11-03T06:09:18.112Z",
    "timestamp": "2017-11-03T06:09:18.112Z"
  }
},
{
  "model": "posts.comment",
  "pk": 27,
  "fields": {
    "user": 3,
    "post": 18,
    "content": "test 2",
    "parent": 15,
    "updated": "2017-11-03T06:09:50.824Z",
    "timestamp": "2017-11-03T06:09:50.824Z"
  }
},
{
  "model": "posts.comment",
  "pk": 28,
  "fields": {
    "user": 1,
    "post": 9,
    "content": "comment #1",
    "parent": null,
    "updated": "2017-11-03T06:21:56.680Z",
    "timestamp": "2017-11-03T06:21:56.680Z"
  }
},
{
  "model": "posts.comment",
  "pk": 29,
  "fields": {
    "user": 1,
    "post": 20,
    "content": "reply this is the application we are going to deploy: www.djangoboards.com. #2",
    "parent": null,
    "updated": "2017-11-04T04:48:55.059Z",
    "timestamp": "2017-11-04T04:48:55.059Z"
  }
},
{
  "model": "posts.comment",
  "pk": 30,
  "fields": {
    "user": 1,
    "post": 22,
    "content": "password hashers",
    "parent": null,
    "updated": "2017-11-06T05:59:27.060Z",
    "timestamp": "2017-11-06T05:59:27.060Z"
  }
},
{
  "model": "posts.comment",
  "pk": 31,
  "fields": {
    "user": 1,
    "post": 25,
    "content": "reply to terminal",
    "parent": null,
    "updated": "2017-11-06T06:31:39.321Z",
    "timestamp": "2017-11-06T06:31:39.321Z"
  }
},
{
  "model": "posts.comment",
  "pk": 32,
  "fields": {
    "user": 1,
    "post": 18,
    "content": "add jquery replies",
    "parent": null,
    "updated": "2017-11-06T07:19:15.993Z",
    "timestamp": "2017-11-06T07:19:15.993Z"
  }
},
{
  "model": "posts.comment",
  "pk": 33,
  "fields": {
    "user": 1,
    "post": 18,
    "content": "with ajax",
    "parent": null,
    "updated": "2017-11-06T07:25:41.837Z",
    "timestamp": "2017-11-06T07:25:41.837Z"
  }
},
{
  "model": "posts.comment",
  "pk": 34,
  "fields": {
    "user": 1,
    "post": 18,
    "content": "with ajax",
    "parent": null,
    "updated": "2017-11-06T07:25:51.223Z",
    "timestamp": "2017-11-06T07:25:51.223Z"
  }
},
{
  "model": "posts.comment",
  "pk": 35,
  "fields": {
    "user": 1,
    "post": 22,
    "content": "The next few sections",
    "parent": null,
    "updated": "2017-11-06T07:27:09.813Z",
    "timestamp": "2017-11-06T07:27:09.813Z"
  }
},
{
  "model": "posts.comment",
  "pk": 36,
  "fields": {
    "user": 1,
    "post": 22,
    "content": "modify this setting",
    "parent": null,
    "updated": "2017-11-06T07:28:32.458Z",
    "timestamp": "2017-11-06T07:28:32.458Z"
  }
},
{
  "model": "posts.comment",
  "pk": 37,
  "fields": {
    "user": 1,
    "post": 22,
    "content": "reply #1",
    "parent": null,
    "updated": "2017-11-06T07:29:24.097Z",
    "timestamp": "2017-11-06T07:29:24.097Z"
  }
},
{
  "model": "posts.comment",
  "pk": 38,
  "fields": {
    "user": 1,
    "post": 22,
    "content": "reply #2",
    "parent": 30,
    "updated": "2017-11-06T07:31:30.860Z",
    "timestamp": "2017-11-06T07:31:30.765Z"
  }
},
{
  "model": "posts.comment",
  "pk": 39,
  "fields": {
    "user": 1,
    "post": 22,
    "content": "reply #3",
    "parent": 30,
    "updated": "2017-11-06T07:32:02.906Z",
    "timestamp": "2017-11-06T07:32:02.794Z"
  }
},
{
  "model": "posts.comment",
  "pk": 40,
  "fields": {
    "user": 1,
    "post": 22,
    "content": "reply #4",
    "parent": 30,
    "updated": "2017-11-06T07:32:18.117Z",
    "timestamp": "2017-11-06T07:32:18.005Z"
  }
},
{
  "model": "posts.comment",
  "pk": 41,
  "fields": {
    "user": 1,
    "post": 22,
    "content": "PASSWORD_HASHERS",
    "parent": null,
    "updated": "2017-11-06T07:33:45.954Z",
    "timestamp": "2017-11-06T07:33:45.954Z"
  }
},
{
  "model": "posts.comment",
  "pk": 42,
  "fields": {
    "user": 1,
    "post": 22,
    "content": "The default for PASSWORD_HASHERS is:",
    "parent": null,
    "updated": "2017-11-06T07:34:35.821Z",
    "timestamp": "2017-11-06T07:34:35.821Z"
  }
},
{
  "model": "posts.comment",
  "pk": 43,
  "fields": {
    "user": 1,
    "post": 22,
    "content": "Django chooses the algorithm to use by consulting the PASSWORD_HASHERS setting",
    "parent": null,
    "updated": "2017-11-06T07:35:51.754Z",
    "timestamp": "2017-11-06T07:35:51.754Z"
  }
},
{
  "model": "posts.comment",
  "pk": 44,
  "fields": {
    "user": 1,
    "post": 21,
    "content": "admin site",
    "parent": null,
    "updated": "2017-11-06T09:56:02.386Z",
    "timestamp": "2017-11-06T09:56:02.386Z"
  }
},
{
  "model": "posts.comment",
  "pk": 45,
  "fields": {
    "user": 1,
    "post": 21,
    "content": "reply #1",
    "parent": 44,
    "updated": "2017-11-06T09:57:54.440Z",
    "timestamp": "2017-11-06T09:57:54.276Z"
  }
},
{
  "model": "posts.comment",
  "pk": 46,
  "fields": {
    "user": 1,
    "post": 21,
    "content": "reply #2",
    "parent": 44,
    "updated": "2017-11-06T10:01:56.130Z",
    "timestamp": "2017-11-06T10:01:56.011Z"
  }
},
{
  "model": "posts.comment",
  "pk": 47,
  "fields": {
    "user": 1,
    "post": 21,
    "content": "reply #3",
    "parent": 44,
    "updated": "2017-11-06T10:02:47.896Z",
    "timestamp": "2017-11-06T10:02:47.800Z"
  }
},
{
  "model": "posts.comment",
  "pk": 48,
  "fields": {
    "user": 1,
    "post": 21,
    "content": "Admin actions",
    "parent": null,
    "updated": "2017-11-06T10:03:05.704Z",
    "timestamp": "2017-11-06T10:03:05.704Z"
  }
},
{
  "model": "posts.comment",
  "pk": 49,
  "fields": {
    "user": 1,
    "post": 21,
    "content": "reply #1",
    "parent": 48,
    "updated": "2017-11-06T10:03:13.430Z",
    "timestamp": "2017-11-06T10:03:13.289Z"
  }
},
{
  "model": "posts.comment",
  "pk": 50,
  "fields": {
    "user": 1,
    "post": 21,
    "content": "reply #2",
    "parent": 48,
    "updated": "2017-11-06T10:05:49.986Z",
    "timestamp": "2017-11-06T10:05:49.866Z"
  }
},
{
  "model": "posts.comment",
  "pk": 51,
  "fields": {
    "user": 1,
    "post": 24,
    "content": "Argon2 is not the default for Django because it requires a third-party library",
    "parent": null,
    "updated": "2017-11-06T11:29:45.759Z",
    "timestamp": "2017-11-06T11:29:45.759Z"
  }
},
{
  "model": "posts.comment",
  "pk": 52,
  "fields": {
    "user": 1,
    "post": 26,
    "content": "add full text-search",
    "parent": null,
    "updated": "2017-11-06T12:54:57.900Z",
    "timestamp": "2017-11-06T12:54:57.900Z"
  }
}
]
